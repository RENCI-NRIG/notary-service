"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 4.0.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

import os
from pathlib import Path
# from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# BASE_DIR = Path(__file__).resolve().parent.parent
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# load environment variables
# env_path = Path('.') / '.env'
# load_dotenv(verbose=True, dotenv_path=env_path)

SESSION_EXPIRE_AT_BROWSER_CLOSE = True
SESSION_COOKIE_AGE = int(os.getenv('DJANGO_SESSION_COOKIE_AGE'))
# OIDC_RENEW_ID_TOKEN_EXPIRY_SECONDS = float(os.getenv('OIDC_RENEW_ID_TOKEN_EXPIRY_SECONDS'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
if str(os.getenv('DJANGO_DEBUG')).lower() == 'true':
    DEBUG = True
else:
    DEBUG = False

# MUST be updated for production
ALLOWED_HOSTS = ["*"]

# django-crispy-forms
# https://django-crispy-forms.readthedocs.io/en/latest/
CRISPY_TEMPLATE_PACK = 'bootstrap4'

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'mozilla_django_oidc',  # mozilla-django-oidc
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'users.apps.UsersConfig',  # custom user model
    'comanage.apps.ComanageConfig',  # comanage authN/authZ
    'crispy_forms',  # django-crispy-forms: https://django-crispy-forms.readthedocs.io/en/latest/dj
    'bootstrap4',  # django-bootstrap4: https://django-bootstrap4.readthedocs.io/en/latest/quickstart.html
    'django_nose',  # django-nose test runner
    'projects.apps.ProjectsConfig',  # projects for notary service
    'nsadmin.apps.NsadminConfig',  # nsadmin dashboard for notary service
    'datasets.apps.DatasetsConfig',  # datasets in notary service
    'workflows.apps.WorkflowsConfig',  # workflows in notary service
    'nsmessages.apps.NsmessagesConfig',  # nsmessages
    'infrastructure.apps.InfrastructureConfig',  # infrastructure in notary service
    'django_cleanup',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 'mozilla_django_oidc.middleware.SessionRefresh',
]

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    # 'mozilla_django_oidc.auth.OIDCAuthenticationBackend',   # mozilla_django_oidc - default
    'users.auth.MyOIDCAB',  # mozilla_django_oidc - custom
)

ROOT_URLCONF = 'base.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates/base'),
            os.path.join(BASE_DIR, 'templates/users'),
            os.path.join(BASE_DIR, 'templates/comanage'),
            os.path.join(BASE_DIR, 'templates/projects'),
            os.path.join(BASE_DIR, 'templates/debug'),
            os.path.join(BASE_DIR, 'templates/datasets'),
            os.path.join(BASE_DIR, 'templates/workflows'),
            os.path.join(BASE_DIR, 'templates/apache_kafka'),
            os.path.join(BASE_DIR, 'templates/infrastructure'),
            os.path.join(BASE_DIR, 'templates/nsadmin'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'workflows.context_processors.export_neo4j_vars',
            ],
        },
    },
]

WSGI_APPLICATION = 'base.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('POSTGRES_DB', 'postgres'),
        'USER': os.getenv('POSTGRES_USER', 'postgres'),
        'PASSWORD': os.getenv('POSTGRES_PASSWORD', 'postgres'),
        'HOST': os.getenv('POSTGRES_HOST', '127.0.0.1'),
        'PORT': os.getenv('POSTGRES_PORT', '5432'),
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Default Django logging is WARNINGS+ to console
# so visible via docker-compose logs django
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'WARNING',
    },
    'loggers': {
        'comanage': {
            'handlers': ['console'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
            'propagate': False,
        },
    },
}

# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = os.getenv('DJANGO_TIME_ZONE')

USE_I18N = True

USE_TZ = True

# mozilla-django-oidc
# https://mozilla-django-oidc.readthedocs.io/en/stable/index.html

# client id and client secret
OIDC_RP_CLIENT_ID = os.getenv('OIDC_RP_CLIENT_ID', None)
OIDC_RP_CLIENT_SECRET = os.getenv('OIDC_RP_CLIENT_SECRET', None)
# signing algorithm
OIDC_RP_SIGN_ALGO = 'RS256'
OIDC_OP_JWKS_ENDPOINT = 'https://cilogon.org/oauth2/certs'
# OpenID Connect provider
OIDC_OP_AUTHORIZATION_ENDPOINT = 'https://cilogon.org/authorize'
OIDC_OP_TOKEN_ENDPOINT = 'https://cilogon.org/oauth2/token'
OIDC_OP_USER_ENDPOINT = 'https://cilogon.org/oauth2/userinfo'
# COmanage scopes
OIDC_RP_SCOPES = 'openid email profile org.cilogon.userinfo edu.uiuc.ncsa.myproxy.getcert'
# username algorithm
OIDC_USERNAME_ALGO = 'users.auth.generate_username'
# store OIDC tokens
OIDC_STORE_ACCESS_TOKEN = os.getenv('OIDC_STORE_ACCESS_TOKEN', False)
OIDC_STORE_ID_TOKEN = os.getenv('OIDC_STORE_ID_TOKEN', False)
# redirect URLs
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'
# SameSite prevents the browser from sending this cookie along with cross-site requests
# Safari seems to need this set to None
SESSION_COOKIE_SAMESITE = None

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'base/static'),
    os.path.join(BASE_DIR, 'workflows/static'),
    os.path.join(BASE_DIR, 'projects/static')
)
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
MEDIA_URL = 'media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

LOGIN_URL = '/login'

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'users.NotaryServiceUser'  # custom user model
